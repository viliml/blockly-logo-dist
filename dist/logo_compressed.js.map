{"version":3,"sources":["generators/logo.js","generators/logo/colour.js","generators/logo/lists.js","generators/logo/logic.js","generators/logo/logo.js","generators/logo/loops.js","generators/logo/math.js","generators/logo/procedures.js","generators/logo/text.js","generators/logo/variables.js","generators/logo/variables_dynamic.js","generators/logo/all.js"],"names":["CodeGenerator","stringUtils","Logo","ORDER_ATOMIC","ORDER_UNARY_NEGATION","ORDER_MULTIPLICATION","ORDER_DIVISION","ORDER_SUBTRACTION","ORDER_ADDITION","ORDER_COMPARISON","ORDER_PROCEDURE","ORDER_NONE","ORDER_OVERRIDES","init","Logo.init","workspace","definitions_","Object","create","functionNames_","variableDB_","reset","Blockly","Names","RESERVED_WORDS_","setVariableMap","getVariableMap","finish","Logo.finish","code","definitions","name","push","join","scrubNakedValue","Logo.scrubNakedValue","line","quote_","Logo.quote_","string","replace","multiline_quote_","Logo.multiline_quote_","split","map","lines","scrub_","Logo.scrub_","block","opt_thisOnly","commentCode","outputConnection","targetConnection","comment","getCommentText","wrap","COMMENT_WRAP","prefixLines","i","inputList","length","type","INPUT_VALUE","childBlock","connection","targetBlock","allNestedComments","nextBlock","nextConnection","nextCode","blockToCode","getAdjusted","Logo.getAdjusted","atId","opt_delta","opt_negate","opt_order","delta","order","options","oneBasedIndex","defaultAtIndex","at","valueToCode","isNumber","Number","innerOrder","Math","floor","c","getFieldValue","r","parseInt","substring","g","b","red","green","blue","elements","Array","itemCount_","functionName","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","element","repeatCount","rev","item","list","mode","where","Error","cmp","ignoreCase","STATEMENT_PREFIX","injectId","conditionCode","ifCode","statementToCode","STATEMENT_SUFFIX","INDENT","elseCode","operator","OPERATORS","argument0","argument1","defaultArgument","value_if","value_then","value_else","dropdown_op","value_amount","toLowerCase","dropdown_direction","dropdown_method","value_r","dropdown_which","value_color","value_value","repeats","getField","String","branch","addLoopTrap","until","variable0","getName","VARIABLE_CATEGORY_NAME","increment","tuple","arg","JavaScript","CONSTANTS","number_to_check","dropdown_property","numberOrder","divisor","varName","funcName","PROCEDURE_CATEGORY_NAME","xfix1","loopTrap","INFINITE_LOOP_TRAP","returnValue","xfix2","args","arguments_","arg_str","hasReturnValue_","value","includes","element0","element1","text","textOrder","procedureName","msg","exports","moduleExports"],"mappings":"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","file":"logo_compressed.js","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Helper functions for generating Logo for blocks.\n * @author Vilim Lendvaj\n */\n'use strict';\n\ngoog.module('Blockly.Logo');\n\nconst {CodeGenerator} = goog.require('Blockly.CodeGenerator');\nconst stringUtils = goog.require('Blockly.utils.string');\n\n\n/**\n * Logo code generator.\n * @type {!CodeGenerator}\n */\nconst Logo = new CodeGenerator('Logo');\n\n/**\n * Order of operation ENUMs.\n */\nLogo.ORDER_ATOMIC = 0;\t\t\t\t// ()\nLogo.ORDER_UNARY_NEGATION = 1;\t\t// -\nLogo.ORDER_MULTIPLICATION = 2.1;\t// *\nLogo.ORDER_DIVISION = 2.2;\t\t\t// /\nLogo.ORDER_SUBTRACTION = 3.1;\t\t// -\nLogo.ORDER_ADDITION = 3.2;\t\t\t// +\nLogo.ORDER_COMPARISON = 4;\t\t\t// = < > <= >= <>\nLogo.ORDER_PROCEDURE = 5;\t\t\t// pr \"|Hello World|\nLogo.ORDER_NONE = 99;\t\t\t\t// ...\n\n/**\n * List of outer-inner pairings that do NOT require parentheses.\n * @type {!Array.<!Array.<number>>}\n */\nLogo.ORDER_OVERRIDES = [\n  // a * (b * c) -> a * b * c\n  [Logo.ORDER_MULTIPLICATION, Logo.ORDER_MULTIPLICATION],\n  // a + (b + c) -> a + b + c\n  [Logo.ORDER_ADDITION, Logo.ORDER_ADDITION],//,\n\n  //pr (abs a) -> pr abs a\n  //[Logo.ORDER_PROCEDURE, Logo.ORDER_PROCEDURE]\n];\n\n/**\n * Initialise the database of variable names.\n * @param {!Blockly.Workspace} workspace Workspace to generate code from.\n */\nLogo.init = function(workspace) {\n  // Create a dictionary of definitions to be printed before the code.\n  Logo.definitions_ = Object.create(null);\n  // Create a dictionary mapping desired function names in definitions_\n  // to actual function names (to avoid collisions with user functions).\n  Logo.functionNames_ = Object.create(null);\n\n  if (!Logo.variableDB_) {\n    Logo.variableDB_ =\n        new Blockly.Names(Logo.RESERVED_WORDS_);\n  } else {\n    Logo.variableDB_.reset();\n  }\n\n  Logo.variableDB_.setVariableMap(workspace.getVariableMap());\n};\n\n/**\n * Prepend the generated code with the variable definitions.\n * @param {string} code Generated code.\n * @return {string} Completed code.\n */\nLogo.finish = function(code) {\n  // Convert the definitions dictionary into a list.\n  var definitions = [];\n  for (var name in Logo.definitions_) {\n    definitions.push(Logo.definitions_[name]);\n  }\n  // Clean up temporary data.\n  delete Logo.definitions_;\n  delete Logo.functionNames_;\n  Logo.variableDB_.reset();\n  return definitions.join('\\n\\n') + '\\n\\n\\n' + code;\n};\n\n/**\n * Naked values are top-level blocks with outputs that aren't plugged into\n * anything.  A trailing semicolon is needed to make this legal.\n * @param {string} line Line of generated code.\n * @return {string} Legal line of code.\n */\nLogo.scrubNakedValue = function(line) {\n  return 'ignore ' + line + '\\n';\n};\n\n/**\n * Encode a string as a properly escaped Logo string, complete with\n * quotes.\n * @param {string} string Text to encode.\n * @return {string} Logo string.\n * @private\n */\nLogo.quote_ = function(string) {\n  string = string.replace(/\\\\/g, '\\\\\\\\').\n      replace(/\\n/g, '\\\\\\n').\n      replace(/;/g, '\\\\;').\n      replace(/ /g, '\\\\ ').\n      replace(/\\|/g, '\\\\|').\n      replace(/~/g, '\\\\~');\n  return '\"' + string;\n};\n\n/**\n * Encode a string as a properly escaped multiline Logo string, complete\n * with quotes.\n * @param {string} string Text to encode.\n * @return {string} Logo string.\n * @private\n */\nLogo.multiline_quote_ = function(string) {\n  // Can't use goog.string.quote since Google's style guide recommends\n  // JS string literals use single quotes.\n  var lines = string.split(/\\n/g).map(Logo.quote_);\n  return lines.join('\\\\\\n');\n};\n\n/**\n * Common tasks for generating Logo from blocks.\n * Handles comments for the specified block and any connected value blocks.\n * Calls any statements following this block.\n * @param {!Blockly.Block} block The current block.\n * @param {string} code The Logo code created for this block.\n * @param {boolean=} opt_thisOnly True to generate code for only this statement.\n * @return {string} Logo code with comments and subsequent blocks added.\n * @private\n */\nLogo.scrub_ = function(block, code, opt_thisOnly) {\n  var commentCode = '';\n  // Only collect comments for blocks that aren't inline.\n  if (!block.outputConnection || !block.outputConnection.targetConnection) {\n    // Collect comment for this block.\n    var comment = block.getCommentText();\n    if (comment) {\n      comment = stringUtils.wrap(comment,\n          Logo.COMMENT_WRAP - 3);\n      commentCode += Logo.prefixLines(comment + '\\n', '; ');\n    }\n    // Collect comments for all value arguments.\n    // Don't collect comments for nested statements.\n    for (var i = 0; i < block.inputList.length; i++) {\n      if (block.inputList[i].type == Blockly.INPUT_VALUE) {\n        var childBlock = block.inputList[i].connection.targetBlock();\n        if (childBlock) {\n          comment = Logo.allNestedComments(childBlock);\n          if (comment) {\n            commentCode += Logo.prefixLines(comment, '; ');\n          }\n        }\n      }\n    }\n  }\n  var nextBlock = block.nextConnection && block.nextConnection.targetBlock();\n  var nextCode = opt_thisOnly ? '' : Logo.blockToCode(nextBlock);\n  return commentCode + code + nextCode;\n};\n\n/**\n * Gets a property and adjusts the value while taking into account indexing.\n * @param {!Blockly.Block} block The block.\n * @param {string} atId The property ID of the element to get.\n * @param {number=} opt_delta Value to add.\n * @param {boolean=} opt_negate Whether to negate the value.\n * @param {number=} opt_order The highest order acting on this value.\n * @return {string|number}\n */\nLogo.getAdjusted = function(block, atId, opt_delta, opt_negate,\n                            opt_order) {\n  var delta = opt_delta || 0;\n  var order = opt_order || Logo.ORDER_NONE;\n  if (!block.workspace.options.oneBasedIndex) {\n    delta++;\n  }\n  var defaultAtIndex = block.workspace.options.oneBasedIndex ? '1' : '0';\n  if (delta > 0) {\n    var at = Logo.valueToCode(block, atId,\n        Logo.ORDER_ADDITION) || defaultAtIndex;\n  } else if (delta < 0) {\n    var at = Logo.valueToCode(block, atId,\n        Logo.ORDER_SUBTRACTION) || defaultAtIndex;\n  } else if (opt_negate) {\n    var at = Logo.valueToCode(block, atId,\n        Logo.ORDER_UNARY_NEGATION) || defaultAtIndex;\n  } else {\n    var at = Logo.valueToCode(block, atId, order) ||\n        defaultAtIndex;\n  }\n\n  if (Blockly.isNumber(at)) {\n    // If the index is a naked number, adjust it right now.\n    at = Number(at) + delta;\n    if (opt_negate) {\n      at = -at;\n    }\n  } else {\n    // If the index is dynamic, adjust it in code.\n    if (delta > 0) {\n      at = at + ' + ' + delta;\n      var innerOrder = Logo.ORDER_ADDITION;\n    } else if (delta < 0) {\n      at = at + ' - ' + -delta;\n      var innerOrder = Logo.ORDER_SUBTRACTION;\n    }\n    if (opt_negate) {\n      if (delta) {\n        at = '-(' + at + ')';\n      } else {\n        at = '-' + at;\n      }\n      var innerOrder = Logo.ORDER_UNARY_NEGATION;\n    }\n    innerOrder = Math.floor(innerOrder);\n    order = Math.floor(order);\n    if (innerOrder && order >= innerOrder) {\n      at = '(' + at + ')';\n    }\n  }\n  return at;\n};\n\nexports.logoGenerator = Logo;\n","/**\n * @fileoverview Generating Logo for colour blocks.\n * @author Vilim Lendvaj\n */\n'use strict';\n\ngoog.module('Blockly.Logo.colour');\n\nconst {logoGenerator: Logo} = goog.require('Blockly.Logo');\n\n\nLogo['colour_picker'] = function(block) {\n  // Colour picker.\n  var c = block.getFieldValue('COLOUR');\n  var r = parseInt(c.substring(1, 3), 16);\n  var g = parseInt(c.substring(3, 5), 16);\n  var b = parseInt(c.substring(5, 7), 16);\n  var code = '[' + r + ' ' + g + ' ' + b + ']';\n  return [code, Logo.ORDER_ATOMIC];\n};\n\nLogo['colour_random'] = function(block) {\n  // Generate a random colour.\n  var code = '(list random 256 random 256 random 256)';\n  return [code, Logo.ORDER_ATOMIC];\n};\n\nLogo['colour_rgb'] = function(block) {\n  // Compose a colour from RGB components expressed as percentages.\n  var red = Logo.valueToCode(block, 'RED', Logo.ORDER_MULTIPLICATION) || 0;\n  var green = Logo.valueToCode(block, 'GREEN', Logo.ORDER_MULTIPLICATION) || 0;\n  var blue = Logo.valueToCode(block, 'BLUE', Logo.ORDER_MULTIPLICATION) || 0;\n  var code = '(list 2.55 * ' + red + ' 2.55 * ' + green + ' 2.55 * ' + blue + ')';\n  return [code, Logo.ORDER_ATOMIC];\n};\n/*\nLogo['colour_blend'] = function(block) {\n  // Blend two colours together.\n  var c1 = Logo.valueToCode(block, 'COLOUR1',\n      Logo.ORDER_COMMA) || '\\'#000000\\'';\n  var c2 = Logo.valueToCode(block, 'COLOUR2',\n      Logo.ORDER_COMMA) || '\\'#000000\\'';\n  var ratio = Logo.valueToCode(block, 'RATIO',\n      Logo.ORDER_COMMA) || 0.5;\n  var functionName = Logo.provideFunction_(\n      'colourBlend',\n      ['function ' + Logo.FUNCTION_NAME_PLACEHOLDER_ +\n          '(c1, c2, ratio) {',\n       '  ratio = Math.max(Math.min(Number(ratio), 1), 0);',\n       '  var r1 = parseInt(c1.substring(1, 3), 16);',\n       '  var g1 = parseInt(c1.substring(3, 5), 16);',\n       '  var b1 = parseInt(c1.substring(5, 7), 16);',\n       '  var r2 = parseInt(c2.substring(1, 3), 16);',\n       '  var g2 = parseInt(c2.substring(3, 5), 16);',\n       '  var b2 = parseInt(c2.substring(5, 7), 16);',\n       '  var r = Math.round(r1 * (1 - ratio) + r2 * ratio);',\n       '  var g = Math.round(g1 * (1 - ratio) + g2 * ratio);',\n       '  var b = Math.round(b1 * (1 - ratio) + b2 * ratio);',\n       '  r = (\\'0\\' + (r || 0).toString(16)).slice(-2);',\n       '  g = (\\'0\\' + (g || 0).toString(16)).slice(-2);',\n       '  b = (\\'0\\' + (b || 0).toString(16)).slice(-2);',\n       '  return \\'#\\' + r + g + b;',\n       '}']);\n  var code = functionName + '(' + c1 + ', ' + c2 + ', ' + ratio + ')';\n  return [code, Logo.ORDER_FUNCTION_CALL];\n};*/\n","/**\n * @fileoverview Generating Logo for list blocks.\n * @author Vilim Lendvaj\n */\n'use strict';\n\ngoog.module('Blockly.Logo.lists');\n\nconst {logoGenerator: Logo} = goog.require('Blockly.Logo');\n\n\nLogo['lists_create_empty'] = function(block) {\n  // Create an empty list.\n  return ['[]', Logo.ORDER_ATOMIC];\n};\n\nLogo['lists_create_with'] = function(block) {\n  // Create a list with any number of elements of any type.\n  var elements = new Array(block.itemCount_);\n  for (var i = 0; i < block.itemCount_; i++) {\n    elements[i] = Logo.valueToCode(block, 'ADD' + i, Logo.ORDER_NONE) || 'null';\n  }\n  var code = '(list ' + elements.join(' ') + ')';\n  return [code, Logo.ORDER_ATOMIC];\n};\n\nLogo['lists_repeat'] = function(block) {\n  // Create a list with one element repeated.\n  var functionName = Logo.provideFunction_('listsRepeat', [\n    'to ' + Logo.FUNCTION_NAME_PLACEHOLDER_ + ' :value :n',\n    '  op cascade :n [lput :value ?] []',\n    'end']);\n  var element = Logo.valueToCode(block, 'ITEM', Logo.ORDER_NONE) || 'null';\n  var repeatCount = Logo.valueToCode(block, 'NUM', Logo.ORDER_NONE) || '0';\n  var code = functionName + ' ' + element + ' ' + repeatCount;\n  return [code, Logo.ORDER_PROCEDURE];\n};\n\nLogo['lists_length'] = function(block) {\n  // String or array length.\n  var list = Logo.valueToCode(block, 'VALUE', Logo.ORDER_NONE) || '[]';\n  return ['count ' + list, Logo.ORDER_PROCEDURE];\n};\n\nLogo['lists_isEmpty'] = function(block) {\n  // Is the string null or array empty?\n  var list = Logo.valueToCode(block, 'VALUE', Logo.ORDER_NONE) || '[]';\n  return ['emptyp ' + list, Logo.ORDER_PROCEDURE];\n};\n\nLogo['lists_indexOf'] = function(block) {\n  // Find an item in the list.\n  var rev = block.getFieldValue('END') == 'FIRST' ? '\"true' : '\"false';\n  var item = Logo.valueToCode(block, 'FIND', Logo.ORDER_NONE) || '\"';\n  var list = Logo.valueToCode(block, 'VALUE', Logo.ORDER_NONE) || '[]';\n  var functionName = Logo.provideFunction_('listsIndexOf', [\n    'to ' + Logo.FUNCTION_NAME_PLACEHOLDER_ + ' :item :l :reverse',\n    '  ifelse :reverse [',\n    '    localmake \"res find [? = :item] reverse :l',\n    '    op ifelse listp :res 0 1 - :res + count :l',\n    '  ][',\n    '    localmake \"res find [? = :item] :l',\n    '    op ifelse listp :res 0 :res',\n    '  ]',\n    'end']);\n  var code = functionName + ' ' + item + ' ' + list + ' ' + rev;\n  if (block.workspace.options.oneBasedIndex) {\n    return [code, Logo.ORDER_PROCEDURE];\n  }\n  return ['-1 + ' + code, Logo.ORDER_PROCEDURE];\n};\n\nLogo['lists_getIndex'] = function(block) {\n  // Get element at index.\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\n  var mode = block.getFieldValue('MODE') || 'GET';\n  var where = block.getFieldValue('WHERE') || 'FROM_START';\n  var listOrder = Logo.ORDER_NONE;\n  var list = Logo.valueToCode(block, 'VALUE', listOrder) || '[]';\n\n  switch (where) {\n    case ('FIRST'):\n      if (mode == 'GET') {\n        var code = 'first ' + list;\n        return [code, Logo.ORDER_PROCEDURE];\n      }\n      break;\n    case ('LAST'):\n      if (mode == 'GET') {\n        var code = 'last ' + list;\n        return [code, Logo.ORDER_PROCEDURE];\n      }\n      break;\n    case ('FROM_START'):\n      var at = Logo.getAdjusted(block, 'AT');\n      if (mode == 'GET') {\n        var code = 'item ' + at + ' ' + list;\n        return [code, Logo.ORDER_PROCEDURE];\n      }\n      break;\n    case ('RANDOM'):\n      if (mode == 'GET') {\n        var code = 'pick ' + list;\n        return [code, Logo.ORDER_PROCEDURE];\n      }\n      break;\n  }\n  throw Error('Unhandled combination (lists_getIndex).');\n};\n\nLogo['lists_sort'] = function(block) {\n  // Block for sorting a list.\n  var list = Logo.valueToCode(block, 'LIST', Logo.ORDER_NONE) || '[]';\n  var type = block.getFieldValue('TYPE');\n  if (block.getFieldValue('DIRECTION') === '1') {\n    if (type === 'NUMERIC') {\n      var cmp = '\"lessp';\n    } else {\n      var cmp = '\"beforep';\n    }\n  } else {\n    if (type === 'NUMERIC') {\n      var cmp = '\"greaterp';\n    } else {\n      var cmp = '[beforep ?2 ?1]';\n    }\n  }\n  if (type === 'TEXT') {\n    var ignoreCase = '\"false';\n  } else {\n    var ignoreCase = '\"true';\n  }\n  var functionName = Logo.provideFunction_('listsGetSort', [\n    'to ' + Logo.FUNCTION_NAME_PLACEHOLDER_ + ' :l',\n    '  localmake \"cip ifelse definedp \"caseignoredp [:caseignoredp] \"\"true',\n    '  make \"caseignoredp ' + ignoreCase,\n    '  localmake \"res (sort :l ' + cmp + ')',\n    '  make \"caseignoredp :cip',\n    '  op :res',\n    'end']);\n  return [functionName + ' ' + list, Logo.ORDER_PROCEDURE];\n};\n\n// Logo['lists_split'] = function(block) {\n// // Block for splitting text into a list, or joining a list into text.\n// var input = Logo.valueToCode(block, 'INPUT',\n// Logo.ORDER_MEMBER);\n// var delimiter = Logo.valueToCode(block, 'DELIM',\n// Logo.ORDER_NONE) || '\\'\\'';\n// var mode = block.getFieldValue('MODE');\n// if (mode == 'SPLIT') {\n// if (!input) {\n// input = '\\'\\'';\n// }\n// var functionName = 'split';\n// } else if (mode == 'JOIN') {\n// if (!input) {\n// input = '[]';\n// }\n// var functionName = 'join';\n// } else {\n// throw Error('Unknown mode: ' + mode);\n// }\n// var code = input + '.' + functionName + '(' + delimiter + ')';\n// return [code, Logo.ORDER_FUNCTION_CALL];\n// };\n\nLogo['lists_reverse'] = function(block) {\n  // Block for reversing a list.\n  var list = Logo.valueToCode(block, 'LIST', Logo.ORDER_NONE) || '[]';\n  var code = 'reverse ' + list;\n  return [code, Logo.ORDER_PROCEDURE];\n};\n","/**\n * @fileoverview Generating Logo for logic blocks.\n * @author Vilim Lendvaj\n */\n'use strict';\n\ngoog.module('Blockly.Logo.logic');\n\nconst {logoGenerator: Logo} = goog.require('Blockly.Logo');\n\n\nLogo['controls_ifelse'] = function(block) {\n  // If/else condition.\n  var code = '', conditionCode, ifCode, elseCode;\n  if (Logo.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    code += Logo.injectId(Logo.STATEMENT_PREFIX, block);\n  }\n  conditionCode = Logo.valueToCode(block, 'IF0', Logo.ORDER_NONE) || '\"false';\n  ifCode = Logo.statementToCode(block, 'DO0');\n  if (Logo.STATEMENT_SUFFIX) {\n    ifCode = Logo.prefixLines(Logo.injectId(Logo.STATEMENT_SUFFIX, block), Logo.INDENT) + ifCode;\n  }\n\n  elseCode = Logo.statementToCode(block, 'ELSE');\n  if (Logo.STATEMENT_SUFFIX) {\n    elseCode = Logo.prefixLines(Logo.injectId(Logo.STATEMENT_SUFFIX, block), Logo.INDENT) +\n        elseCode;\n  }\n  code += 'ifelse ' + conditionCode + ' [\\n' + ifCode + '] [\\n' + elseCode + ']\\n';\n  return code;\n};\n\nLogo['logic_compare'] = function(block) {\n  // Comparison operator.\n  var OPERATORS = {\n    'EQ': '==', 'NEQ': '<>', 'LT': '<', 'LTE': '<=', 'GT': '>', 'GTE': '>=',\n  };\n  var operator = OPERATORS[block.getFieldValue('OP')];\n  var argument0 = Logo.valueToCode(block, 'A', Logo.ORDER_COMPARISON) || '0';\n  var argument1 = Logo.valueToCode(block, 'B', Logo.ORDER_COMPARISON) || '0';\n  var code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, Logo.ORDER_COMPARISON];\n};\n\nLogo['logic_operation'] = function(block) {\n  // Operations 'and', 'or'.\n  var operator = (block.getFieldValue('OP') == 'AND') ? 'and' : 'or';\n  var argument0 = Logo.valueToCode(block, 'A', Logo.ORDER_NONE);\n  var argument1 = Logo.valueToCode(block, 'B', Logo.ORDER_NONE);\n  // Single missing arguments have no effect on the return value.\n  var defaultArgument = (operator == 'and') ? 'true' : 'false';\n  if (!argument0) {\n    argument0 = defaultArgument;\n  }\n  if (!argument1) {\n    argument1 = defaultArgument;\n  }\n  var code = operator + ' ' + argument0 + ' ' + argument1;\n  return [code, Logo.ORDER_PROCEDURE];\n};\n\nLogo['logic_negate'] = function(block) {\n  // Negation.\n  var argument0 = Logo.valueToCode(block, 'BOOL', Logo.ORDER_NONE) || 'true';\n  var code = '!' + argument0;\n  return [code, Logo.ORDER_PROCEDURE];\n};\n\nLogo['logic_boolean'] = function(block) {\n  // Boolean values true and false.\n  var code = (block.getFieldValue('BOOL') == 'TRUE') ? '\"true' : '\"false';\n  return [code, Logo.ORDER_ATOMIC];\n};\n\nLogo['logic_null'] = function(block) {\n  // Null data type.\n  return ['[]', Logo.ORDER_ATOMIC];\n};\n\nLogo['logic_ternary'] = function(block) {\n  // Ternary operator.\n  var value_if = Logo.valueToCode(block, 'IF', Logo.ORDER_NONE) || '\"false';\n  var value_then = Logo.valueToCode(block, 'THEN', Logo.ORDER_NONE) || '[]';\n  var value_else = Logo.valueToCode(block, 'ELSE', Logo.ORDER_NONE) || '[]';\n  var code = 'ifelse ' + value_if + ' [' + value_then + '] [' + value_else + ']';\n  return [code, Logo.ORDER_PROCEDURE];\n};\n","/**\n * @fileoverview Generating Logo for logo blocks.\n * @author Vilim Lendvaj\n */\n'use strict';\n\ngoog.module('Blockly.Logo.logo');\n\nconst {logoGenerator: Logo} = goog.require('Blockly.Logo');\n\n\nLogo['logo_move'] = function(block) {\n  var dropdown_op = block.getFieldValue('OP');\n  var value_amount = Logo.valueToCode(block, 'AMOUNT', Logo.ORDER_NONE);\n  return dropdown_op.toLowerCase() + ' ' + value_amount + '\\n';\n};\n\nLogo['logo_rotate'] = function(block) {\n  var dropdown_direction = block.getFieldValue('DIRECTION');\n  var value_amount = Logo.valueToCode(block, 'AMOUNT', Logo.ORDER_NONE);\n  return dropdown_direction.toLowerCase() + ' ' + value_amount + '\\n';\n};\n\nLogo['logo_circle'] = function(block) {\n  var dropdown_method = block.getFieldValue('METHOD');\n  var value_r = Logo.valueToCode(block, 'R', Logo.ORDER_NONE);\n  return dropdown_method.toLowerCase() + ' ' + value_r + '\\n';\n};\n\nLogo['logo_pen'] = function(block) {\n  var dropdown_op = block.getFieldValue('OP');\n  return dropdown_op.toLowerCase() + '\\n';\n};\n\nLogo['logo_setcolor'] = function(block) {\n  var dropdown_which = block.getFieldValue('WHICH');\n  var value_color = Logo.valueToCode(block, 'COLOR', Logo.ORDER_ATOMIC);\n  return dropdown_which.toLowerCase() + ' ' + value_color + '\\n';\n};\n\nLogo['logo_getcolor'] = function(block) {\n  var dropdown_which = block.getFieldValue('WHICH');\n  return [dropdown_which.toLowerCase(), Logo.ORDER_PROCEDURE];\n};\n\nLogo['logo_mode'] = function(block) {\n  var dropdown_which = block.getFieldValue('WHICH');\n  return dropdown_which.toLowerCase() + '\\n';\n};\n\nLogo['logo_screen'] = function(block) {\n  var dropdown_which = block.getFieldValue('WHICH');\n  return dropdown_which.toLowerCase() + '\\n';\n};\n\nLogo['logo_set'] = function(block) {\n  var dropdown_which = block.getFieldValue('WHICH');\n  var value_value = Logo.valueToCode(block, 'VALUE', Logo.ORDER_NONE);\n  return dropdown_which.toLowerCase() + ' ' + value_value + '\\n';\n};\n\nLogo['logo_get'] = function(block) {\n  var dropdown_which = block.getFieldValue('WHICH');\n  return [dropdown_which.toLowerCase(), Logo.ORDER_PROCEDURE];\n};\n","/**\n * @fileoverview Generating Logo for loop blocks.\n * @author Vilim Lendvaj\n */\n'use strict';\n\ngoog.module('Blockly.Logo.loops');\n\nconst {logoGenerator: Logo} = goog.require('Blockly.Logo');\n\n\nLogo['controls_repeat_ext'] = function(block) {\n  // Repeat n times.\n  if (block.getField('TIMES')) {\n    // Internal number.\n    var repeats = String(Number(block.getFieldValue('TIMES')));\n  } else {\n    // External number.\n    var repeats = Logo.valueToCode(block, 'TIMES', Logo.ORDER_NONE) || '0';\n  }\n  var branch = Logo.statementToCode(block, 'DO');\n  branch = Logo.addLoopTrap(branch, block);\n  var code = '';\n  code += 'repeat ' + repeats + ' [\\n' + branch + ']\\n';\n  return code;\n};\n\nLogo['controls_repeat'] = Logo['controls_repeat_ext'];\n\nLogo['controls_whileUntil'] = function(block) {\n  // Do while/until loop.\n  var until = block.getFieldValue('MODE') == 'UNTIL';\n  var argument0 = Logo.valueToCode(block, 'BOOL', Logo.ORDER_NONE) || '\"false';\n  var branch = Logo.statementToCode(block, 'DO');\n  branch = Logo.addLoopTrap(branch, block);\n  return (until ? 'until ' : 'while ') + argument0 + ' [\\n' + branch + ']\\n';\n};\n\nLogo['controls_for'] = function(block) {\n  // For loop.\n  var variable0 = Logo.variableDB_.getName(block.getFieldValue('VAR'),\n      Blockly.VARIABLE_CATEGORY_NAME);\n  var argument0 = Logo.valueToCode(block, 'FROM', Logo.ORDER_NONE) || '0';\n  var argument1 = Logo.valueToCode(block, 'TO', Logo.ORDER_NONE) || '0';\n  var increment = Logo.valueToCode(block, 'BY', Logo.ORDER_NONE) || '1';\n  var branch = Logo.statementToCode(block, 'DO');\n  branch = Logo.addLoopTrap(branch, block);\n  var code = 'for [' + variable0 + ' [' + argument0 + '] [' + argument1 + '] [' + increment +\n      ']] [\\n' + branch + ']\\n';\n  return code;\n};\n\nLogo['controls_forEach'] = function(block) {\n  // For each loop.\n  var variable0 = Logo.variableDB_.getName(block.getFieldValue('VAR'),\n      Blockly.VARIABLE_CATEGORY_NAME);\n  var argument0 = Logo.valueToCode(block, 'LIST', Logo.ORDER_NONE) || '[]';\n  var branch = Logo.statementToCode(block, 'DO');\n  branch = Logo.addLoopTrap(branch, block);\n  branch = Logo.INDENT + 'make \"' + variable0 + ' ?\\n' + branch;\n  var code = 'foreach ' + argument0 + ' [\\n' + branch + ']\\n';\n  return code;\n};\n/*\nLogo['controls_flow_statements'] = function(block) {\n  // Flow statements: continue, break.\n  var xfix = '';\n  if (Logo.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    xfix += Logo.injectId(Logo.STATEMENT_PREFIX,\n        block);\n  }\n  if (Logo.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the break/continue is triggered.\n    xfix += Logo.injectId(Logo.STATEMENT_SUFFIX,\n        block);\n  }\n  if (Logo.STATEMENT_PREFIX) {\n    var loop = Blockly.Constants.Loops\n        .CONTROL_FLOW_IN_LOOP_CHECK_MIXIN.getSurroundLoop(block);\n    if (loop && !loop.suppressPrefixSuffix) {\n      // Inject loop's statement prefix here since the regular one at the end\n      // of the loop will not get executed if 'continue' is triggered.\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\n      xfix += Logo.injectId(Logo.STATEMENT_PREFIX,\n          loop);\n    }\n  }\n  switch (block.getFieldValue('FLOW')) {\n    case 'BREAK':\n      return xfix + 'break;\\n';\n    case 'CONTINUE':\n      return xfix + 'continue;\\n';\n  }\n  throw Error('Unknown flow statement.');\n};*/\n","/**\n * @fileoverview Generating Logo for math blocks.\n * @author Vilim Lendvaj\n */\n'use strict';\n\ngoog.module('Blockly.Logo.math');\n\nconst {logoGenerator: Logo} = goog.require('Blockly.Logo');\n\n\nLogo['math_number'] = function(block) {\n  // Numeric value.\n  var code = Number(block.getFieldValue('NUM'));\n  var order = code >= 0 ? Logo.ORDER_ATOMIC : Logo.ORDER_UNARY_NEGATION;\n  return [code, order];\n};\n\nLogo['math_arithmetic'] = function(block) {\n  // Basic arithmetic operators, and power.\n  var OPERATORS = {\n    'ADD': [' + ', Logo.ORDER_ADDITION],\n    'MINUS': [' - ', Logo.ORDER_SUBTRACTION],\n    'MULTIPLY': [' * ', Logo.ORDER_MULTIPLICATION],\n    'DIVIDE': [' / ', Logo.ORDER_DIVISION],\n    'POWER': [null, Logo.ORDER_NONE],  // Handle power separately.\n  };\n  var tuple = OPERATORS[block.getFieldValue('OP')];\n  var operator = tuple[0];\n  var order = tuple[1];\n  var argument0 = Logo.valueToCode(block, 'A', order) || '0';\n  var argument1 = Logo.valueToCode(block, 'B', order) || '0';\n  var code;\n  // Power in Logo requires a special case since it has no operator.\n  if (!operator) {\n    code = 'power ' + argument0 + ' ' + argument1;\n    return [code, Logo.ORDER_PROCEDURE];\n  }\n  code = argument0 + operator + argument1;\n  return [code, order];\n};\n\nLogo['math_single'] = function(block) {\n  // Math operators with single operand.\n  var operator = block.getFieldValue('OP');\n  var code;\n  var arg;\n  if (operator == 'NEG') {\n    // Negation is a special case given its different operator precedence.\n    arg = Logo.valueToCode(block, 'NUM', Logo.ORDER_UNARY_NEGATION) || '0';\n    if (arg[0] == '-') {\n      // --3 is not legal in JS.\n      arg = ' ' + arg;\n    }\n    code = '-' + arg;\n    return [code, Logo.ORDER_UNARY_NEGATION];\n  }\n  if (operator == 'ROUNDUP') {\n    arg = Blockly.JavaScript.valueToCode(block, 'NUM', Blockly.JavaScript.ORDER_ADDITION) || '0';\n  } else {\n    arg = Blockly.JavaScript.valueToCode(block, 'NUM', Blockly.JavaScript.ORDER_NONE) || '0';\n  }\n  // First, handle cases which generate values that don't need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'ABS':\n      code = 'abs ' + arg;\n      break;\n    case 'ROOT':\n      code = 'sqrt ' + arg;\n      break;\n    case 'LN':\n      code = 'ln ' + arg;\n      break;\n    case 'EXP':\n      code = 'exp ' + arg;\n      break;\n    case 'POW10':\n      code = 'power 10 ' + arg;\n      break;\n    case 'ROUND':\n      code = 'round ' + arg;\n      break;\n    case 'ROUNDUP':\n      code = 'round 0.5 + ' + arg;\n      break;\n    case 'ROUNDDOWN':\n      code = 'int ' + arg;\n      break;\n    case 'SIN':\n      code = 'sin ' + arg;\n      break;\n    case 'COS':\n      code = 'cos ' + arg;\n      break;\n    case 'TAN':\n      code = 'tan ' + arg;\n      break;\n    case 'LOG10':\n      code = 'log10 ' + arg;\n      break;\n    case 'ASIN':\n      code = 'arcsin ' + arg;\n      break;\n    case 'ACOS':\n      code = 'arccos ' + arg;\n      break;\n    case 'ATAN':\n      code = 'arctan ' + arg;\n      break;\n    default:\n      throw Error('Unknown math operator: ' + operator);\n  }\n  return [code, Logo.ORDER_PROCEDURE];\n};\n\nLogo['math_constant'] = function(block) {\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\n  var CONSTANTS = {\n    'PI': ['pi', Logo.ORDER_ATOMIC],\n    'E': ['exp 1', Logo.ORDER_PROCEDURE],\n    'GOLDEN_RATIO': ['(1 + sqrt 5) / 2', Logo.ORDER_DIVISION],\n    'SQRT2': ['sqrt 2', Logo.ORDER_PROCEDURE],\n    'SQRT1_2': ['sqrt 1/2', Logo.ORDER_PROCEDURE],\n  };\n  return CONSTANTS[block.getFieldValue('CONSTANT')];\n};\n\nLogo['math_number_property'] = function(block) {\n  // Check if a number is even, odd, prime, whole, positive, or negative\n  // or if it is divisible by certain number. Returns true or false.\n  var dropdown_property = block.getFieldValue('PROPERTY');\n  var code;\n  if (dropdown_property == 'PRIME') {\n    throw Error('Primality testing isn\\'t supported yet');\n    var number_to_check = Logo.valueToCode(block, 'NUMBER_TO_CHECK', Logo.ORDER_NONE) || '0';\n    // Prime is a special case as it is not a one-liner test.\n    var functionName = Logo.provideFunction_('mathIsPrime', [\n      'function ' + Logo.FUNCTION_NAME_PLACEHOLDER_ + '(n) {',\n      '  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods',\n      '  if (n == 2 || n == 3) {',\n      '    return true;',\n      '  }',\n      '  // False if n is NaN, negative, is 1, or not whole.',\n      '  // And false if n is divisible by 2 or 3.',\n      '  if (isNaN(n) || n <= 1 || n % 1 != 0 || n % 2 == 0 ||' + ' n % 3 == 0) {',\n      '    return false;',\n      '  }',\n      '  // Check all the numbers of form 6k +/- 1, up to sqrt(n).',\n      '  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {',\n      '    if (n % (x - 1) == 0 || n % (x + 1) == 0) {',\n      '      return false;',\n      '    }',\n      '  }',\n      '  return true;',\n      '}']);\n    code = functionName + '(' + number_to_check + ')';\n    return [code, Logo.ORDER_PROCEDURE];\n  }\n  var numberOrder = (dropdown_property == 'POSITIVE' || dropdown_property == 'NEGATIVE') ?\n      Logo.ORDER_COMPARISON :\n      Logo.ORDER_NONE;\n  var order = (dropdown_property == 'POSITIVE' || dropdown_property == 'NEGATIVE') ?\n      Logo.ORDER_COMPARISON :\n      Logo.ORDER_PROCEDURE;\n  var number_to_check = Logo.valueToCode(block, 'NUMBER_TO_CHECK', numberOrder) || '0';\n  switch (dropdown_property) {\n    case 'EVEN':\n      code = '0 == modulo ' + number_to_check + ' 2';\n      break;\n    case 'ODD':\n      code = '1 == modulo ' + number_to_check + ' 2';\n      break;\n    case 'WHOLE':\n      code = '0 == modulo ' + number_to_check + ' 1';\n      break;\n    case 'POSITIVE':\n      code = number_to_check + ' > 0';\n      break;\n    case 'NEGATIVE':\n      code = number_to_check + ' < 0';\n      break;\n    case 'DIVISIBLE_BY':\n      var divisor = Logo.valueToCode(block, 'DIVISOR', Logo.ORDER_NONE) || '0';\n      code = number_to_check + ' % ' + divisor + ' == 0';\n      break;\n  }\n  return [code, order];\n};\n\nLogo['math_change'] = function(block) {\n  // Add to a variable in place.\n  var argument0 = Logo.valueToCode(block, 'DELTA', Logo.ORDER_ADDITION) || '0';\n  var varName = Logo.variableDB_.getName(block.getFieldValue('VAR'),\n      Blockly.VARIABLE_CATEGORY_NAME);\n  return 'make \"' + varName + ' (ifelse numberp :' + varName + ' :' + varName + ' 0) + ' +\n      argument0 + '\\n';\n};\n\n// Rounding functions have a single operand.\nLogo['math_round'] = Logo['math_single'];\n// Trigonometry functions have a single operand.\nLogo['math_trig'] = Logo['math_single'];\n/*\nLogo['math_on_list'] = function(block) {\n  // Math functions for lists.\n  var func = block.getFieldValue('OP');\n  var list, code;\n  switch (func) {\n    case 'SUM':\n      list = Logo.valueToCode(block, 'LIST',\n          Logo.ORDER_MEMBER) || '[]';\n      code = list + '.reduce(function(x, y) {return x + y;})';\n      break;\n    case 'MIN':\n      list = Logo.valueToCode(block, 'LIST',\n          Logo.ORDER_COMMA) || '[]';\n      code = 'Math.min.apply(null, ' + list + ')';\n      break;\n    case 'MAX':\n      list = Logo.valueToCode(block, 'LIST',\n          Logo.ORDER_COMMA) || '[]';\n      code = 'Math.max.apply(null, ' + list + ')';\n      break;\n    case 'AVERAGE':\n      // mathMean([null,null,1,3]) == 2.0.\n      var functionName = Logo.provideFunction_(\n          'mathMean',\n          ['function ' + Logo.FUNCTION_NAME_PLACEHOLDER_ +\n              '(myList) {',\n            '  return myList.reduce(function(x, y) {return x + y;}) / ' +\n                  'myList.length;',\n            '}']);\n      list = Logo.valueToCode(block, 'LIST',\n          Logo.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    case 'MEDIAN':\n      // mathMedian([null,null,1,3]) == 2.0.\n      var functionName = Logo.provideFunction_(\n          'mathMedian',\n          ['function ' + Logo.FUNCTION_NAME_PLACEHOLDER_ +\n              '(myList) {',\n            '  var localList = myList.filter(function (x) ' +\n              '{return typeof x == \\'number\\';});',\n            '  if (!localList.length) return null;',\n            '  localList.sort(function(a, b) {return b - a;});',\n            '  if (localList.length % 2 == 0) {',\n            '    return (localList[localList.length / 2 - 1] + ' +\n              'localList[localList.length / 2]) / 2;',\n            '  } else {',\n            '    return localList[(localList.length - 1) / 2];',\n            '  }',\n            '}']);\n      list = Logo.valueToCode(block, 'LIST',\n          Logo.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    case 'MODE':\n      // As a list of numbers can contain more than one mode,\n      // the returned result is provided as an array.\n      // Mode of [3, 'x', 'x', 1, 1, 2, '3'] -> ['x', 1].\n      var functionName = Logo.provideFunction_(\n          'mathModes',\n          ['function ' + Logo.FUNCTION_NAME_PLACEHOLDER_ +\n              '(values) {',\n            '  var modes = [];',\n            '  var counts = [];',\n            '  var maxCount = 0;',\n            '  for (var i = 0; i < values.length; i++) {',\n            '    var value = values[i];',\n            '    var found = false;',\n            '    var thisCount;',\n            '    for (var j = 0; j < counts.length; j++) {',\n            '      if (counts[j][0] === value) {',\n            '        thisCount = ++counts[j][1];',\n            '        found = true;',\n            '        break;',\n            '      }',\n            '    }',\n            '    if (!found) {',\n            '      counts.push([value, 1]);',\n            '      thisCount = 1;',\n            '    }',\n            '    maxCount = Math.max(thisCount, maxCount);',\n            '  }',\n            '  for (var j = 0; j < counts.length; j++) {',\n            '    if (counts[j][1] == maxCount) {',\n            '        modes.push(counts[j][0]);',\n            '    }',\n            '  }',\n            '  return modes;',\n            '}']);\n      list = Logo.valueToCode(block, 'LIST',\n          Logo.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    case 'STD_DEV':\n      var functionName = Logo.provideFunction_(\n          'mathStandardDeviation',\n          ['function ' + Logo.FUNCTION_NAME_PLACEHOLDER_ +\n              '(numbers) {',\n            '  var n = numbers.length;',\n            '  if (!n) return null;',\n            '  var mean = numbers.reduce(function(x, y) {return x + y;}) / n;',\n            '  var variance = 0;',\n            '  for (var j = 0; j < n; j++) {',\n            '    variance += Math.pow(numbers[j] - mean, 2);',\n            '  }',\n            '  variance = variance / n;',\n            '  return Math.sqrt(variance);',\n            '}']);\n      list = Logo.valueToCode(block, 'LIST',\n          Logo.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    case 'RANDOM':\n      var functionName = Logo.provideFunction_(\n          'mathRandomList',\n          ['function ' + Logo.FUNCTION_NAME_PLACEHOLDER_ +\n              '(list) {',\n            '  var x = Math.floor(Math.random() * list.length);',\n            '  return list[x];',\n            '}']);\n      list = Logo.valueToCode(block, 'LIST',\n          Logo.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    default:\n      throw Error('Unknown operator: ' + func);\n  }\n  return [code, Logo.ORDER_FUNCTION_CALL];\n};\n*/\nLogo['math_modulo'] = function(block) {\n  // Remainder computation.\n  var argument0 = Logo.valueToCode(block, 'DIVIDEND', Logo.ORDER_NONE) || '0';\n  var argument1 = Logo.valueToCode(block, 'DIVISOR', Logo.ORDER_NONE) || '0';\n  var code = 'modulo ' + argument0 + ' ' + argument1;\n  return [code, Logo.ORDER_PROCEDURE];\n};\n/*\nLogo['math_constrain'] = function(block) {\n  // Constrain a number between two limits.\n  var argument0 = Logo.valueToCode(block, 'VALUE',\n      Logo.ORDER_COMMA) || '0';\n  var argument1 = Logo.valueToCode(block, 'LOW',\n      Logo.ORDER_COMMA) || '0';\n  var argument2 = Logo.valueToCode(block, 'HIGH',\n      Logo.ORDER_COMMA) || 'Infinity';\n  var code = 'Math.min(Math.max(' + argument0 + ', ' + argument1 + '), ' +\n      argument2 + ')';\n  return [code, Logo.ORDER_FUNCTION_CALL];\n};\n*/\nLogo['math_random_int'] = function(block) {\n  // Random integer between [X] and [Y].\n  var argument0 = Logo.valueToCode(block, 'FROM', Logo.ORDER_SUBTRACTION) || '0';\n  var argument1 = Logo.valueToCode(block, 'TO', Logo.ORDER_SUBTRACTION) || '0';\n  var code = argument0 + ' + random ' + argument1 + ' - ' + argument0 + ' + 1';\n  return [code, Logo.ORDER_PROCEDURE];\n};\n/*\nLogo['math_random_float'] = function(block) {\n  // Random fraction between 0 and 1.\n  return ['Math.random()', Logo.ORDER_FUNCTION_CALL];\n};\n*/\nLogo['math_atan2'] = function(block) {\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\n  var argument0 = Logo.valueToCode(block, 'X', Logo.ORDER_NONE) || '0';\n  var argument1 = Logo.valueToCode(block, 'Y', Logo.ORDER_NONE) || '0';\n  return [\n    '(arctan ' + argument0 + ' ' + argument1 + ')', Logo.ORDER_ATOMIC];\n};\n","/**\n * @fileoverview Generating Logo for procedure blocks.\n * @author Vilim Lendvaj\n */\n'use strict';\n\ngoog.module('Blockly.Logo.procedures');\n\nconst {logoGenerator: Logo} = goog.require('Blockly.Logo');\n\n\nLogo['procedures_defreturn'] = function(block) {\n  // Define a procedure with a return value.\n  var funcName = Logo.variableDB_.getName(block.getFieldValue('NAME'),\n      Blockly.PROCEDURE_CATEGORY_NAME);\n  var xfix1 = '';\n  if (Logo.STATEMENT_PREFIX) {\n    xfix1 += Logo.injectId(Logo.STATEMENT_PREFIX, block);\n  }\n  if (Logo.STATEMENT_SUFFIX) {\n    xfix1 += Logo.injectId(Logo.STATEMENT_SUFFIX, block);\n  }\n  if (xfix1) {\n    xfix1 = Logo.prefixLines(xfix1, Logo.INDENT);\n  }\n  var loopTrap = '';\n  if (Logo.INFINITE_LOOP_TRAP) {\n    loopTrap = Logo.prefixLines(Logo.injectId(Logo.INFINITE_LOOP_TRAP, block), Logo.INDENT);\n  }\n  var branch = Logo.statementToCode(block, 'STACK');\n  var returnValue = Logo.valueToCode(block, 'RETURN', Logo.ORDER_NONE) || '';\n  var xfix2 = '';\n  if (branch && returnValue) {\n    // After executing the function body, revisit this block for the return.\n    xfix2 = xfix1;\n  }\n  if (returnValue) {\n    returnValue = Logo.INDENT + 'op ' + returnValue + '\\n';\n  }\n  var args = [];\n  for (var i = 0; i < block.arguments_.length; i++) {\n    args[i] = Logo.variableDB_.getName(block.arguments_[i], Blockly.VARIABLE_CATEGORY_NAME);\n  }\n  var arg_str = args.join(' :');\n  if (arg_str) {\n    arg_str = ' :' + arg_str;\n  }\n  var code = 'to ' + funcName + arg_str + '\\n' + xfix1 + loopTrap + branch + xfix2 + returnValue +\n      'end';\n  code = Logo.scrub_(block, code);\n  // Add % so as not to collide with helper functions in definitions list.\n  Logo.definitions_['%' + funcName] = code;\n  return null;\n};\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nLogo['procedures_defnoreturn'] = Logo['procedures_defreturn'];\n\nLogo['procedures_callreturn'] = function(block) {\n  // Call a procedure with a return value.\n  var funcName = Logo.variableDB_.getName(block.getFieldValue('NAME'),\n      Blockly.PROCEDURE_CATEGORY_NAME);\n  var args = [];\n  for (var i = 0; i < block.arguments_.length; i++) {\n    args[i] = Logo.valueToCode(block, 'ARG' + i, Logo.ORDER_NONE) || '[]';\n  }\n  var code = funcName + ' ' + args.join(' ');\n  return [code, Logo.ORDER_PROCEDURE];\n};\n\nLogo['procedures_callnoreturn'] = function(block) {\n  // Call a procedure with no return value.\n  // Generated code is for a function call as a statement is the same as a\n  // function call as a value, with the addition of line ending.\n  var tuple = Logo['procedures_callreturn'](block);\n  return tuple[0] + '\\n';\n};\n\nLogo['procedures_ifreturn'] = function(block) {\n  // Conditionally return value from a procedure.\n  var condition = Logo.valueToCode(block, 'CONDITION', Logo.ORDER_NONE) || 'false';\n  var code = 'if ' + condition + ' [\\n';\n  if (Logo.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the return is triggered.\n    code += Logo.prefixLines(Logo.injectId(Logo.STATEMENT_SUFFIX, block), Logo.INDENT);\n  }\n  if (block.hasReturnValue_) {\n    var value = Logo.valueToCode(block, 'VALUE', Logo.ORDER_NONE) || '[]';\n    code += Logo.INDENT + 'op ' + value + '\\n';\n  } else {\n    code += Logo.INDENT + 'stop\\n';\n  }\n  code += ']\\n';\n  return code;\n};\n","/**\n * @fileoverview Generating Logo for text blocks.\n * @author Vilim Lendvaj\n */\n'use strict';\n\ngoog.module('Blockly.Logo.texts');\n\nconst {logoGenerator: Logo} = goog.require('Blockly.Logo');\n\n\nLogo['text'] = function(block) {\n  // Text value.\n  var code = Logo.quote_(block.getFieldValue('TEXT'));\n  return [code, Logo.ORDER_ATOMIC];\n};\n\nLogo['text_multiline'] = function(block) {\n  // Text value.\n  var code = Logo.multiline_quote_(block.getFieldValue('TEXT'));\n  if (code.includes('\\n')) {\n    code = '(' + code + ')';\n  }\n  return [code, Logo.ORDER_ATOMIC];\n};\n\nLogo['text_join'] = function(block) {\n  // Create a string made up of any number of elements of any type.\n  switch (block.itemCount_) {\n    case 0:\n      return ['\"', Logo.ORDER_ATOMIC];\n    case 2: {\n      const element0 = Logo.valueToCode(block, 'ADD0', Logo.ORDER_ATOMIC) || '\"';\n      const element1 = Logo.valueToCode(block, 'ADD1', Logo.ORDER_NONE) || '\"';\n      const code = 'word ' + element0 + ' ' + element1;\n      return [code, Logo.ORDER_PROCEDURE];\n    }\n    default: {\n      const elements = new Array(block.itemCount_);\n      for (var i = 0; i < block.itemCount_; i++) {\n        elements[i] = Logo.valueToCode(block, 'ADD' + i, Logo.ORDER_NONE) || '\"';\n      }\n      const code = '(word ' + elements.join(' ') + ')';\n      return [code, Logo.ORDER_ATOMIC];\n    }\n  }\n};\n\nLogo['text_append'] = function(block) {\n  // Append to a variable in place.\n  var varName = Logo.variableDB_.getName(block.getFieldValue('VAR'),\n      Blockly.VARIABLE_CATEGORY_NAME);\n  var value = Logo.valueToCode(block, 'TEXT', Logo.ORDER_NONE) || '\"';\n  return 'make \"' + varName + ' word :' + varName + ' ' + value + '\\n';\n};\n\nLogo['text_length'] = function(block) {\n  // String or array length.\n  var text = Logo.valueToCode(block, 'VALUE', Logo.ORDER_NONE) || '\\'\\'';\n  return ['count ' + text, Logo.ORDER_PROCEDURE];\n};\n\nLogo['text_isEmpty'] = function(block) {\n  // Is the string null or array empty?\n  var text = Logo.valueToCode(block, 'VALUE', Logo.ORDER_NONE) || '\\'\\'';\n  return ['emptyp ' + text, Logo.ORDER_PROCEDURE];\n};\n\nLogo['text_charAt'] = function(block) {\n  // Get letter at index.\n  // Note: Until January 2013 this block did not have the WHERE input.\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const textOrder = (where === 'FROM_END') ?\n      Blockly.JavaScript.ORDER_SUBTRACTION :\n      Blockly.JavaScript.ORDER_NONE;\n  const text = Logo.valueToCode(block, 'VALUE', textOrder) || '\\'\\'';\n  switch (where) {\n    case 'FIRST': {\n      const code = 'first ' + text;\n      return [code, Logo.ORDER_PROCEDURE];\n    }\n    case 'LAST': {\n      const code = 'last ' + text;\n      return [code, Logo.ORDER_PROCEDURE];\n    }\n    case 'FROM_START': {\n      const at = Logo.getAdjusted(block, 'AT');\n      // Adjust index if using one-based indices.\n      const code = 'item ' + at + ' ' + text;\n      return [code, Logo.ORDER_PROCEDURE];\n    }\n    case 'FROM_END': {\n      const at = Logo.getAdjusted(block, 'AT', -1, true);\n      const procedureName = Logo.provideFunction_('wordLetterFromEnd', [\n        'to ' + Logo.FUNCTION_NAME_PLACEHOLDER_ + ' :w :a', 'op item :a + count :w :w', 'end']);\n      const code = procedureName + ' ' + text + ' ' + at;\n      return [code, Logo.ORDER_PROCEDURE];\n    }\n    case 'RANDOM': {\n      const code = 'pick ' + text;\n      return [code, Logo.ORDER_PROCEDURE];\n    }\n  }\n  throw Error('Unhandled option (text_charAt).');\n};\n\nLogo['text_changeCase'] = function(block) {\n// Change capitalization.\n  const OPERATORS = {\n    'UPPERCASE': 'uppercase ', 'LOWERCASE': 'lowercase ', 'TITLECASE': null,\n  };\n  const operator = OPERATORS[block.getFieldValue('CASE')];\n  const text = Logo.valueToCode(block, 'TEXT', Logo.ORDER_NONE) || '\"';\n  let code;\n  if (operator) {\n    // Upper and lower case are functions built into Logo.\n    code = operator + text;\n  } else {\n    // Title case is not a native Logo function.  Define one.\n    const functionName = Logo.provideFunction_('textToTitleCase', [\n      'to ' + Logo.FUNCTION_NAME_PLACEHOLDER_ + ' :w',\n      'op map [ifelse #>1 [ifelse \"\\\\  = item #-1 :w [uppercase ?] [lowercase ?]][uppercase ?]] :w',\n      'end']);\n    code = functionName + ' ' + text;\n  }\n  return [code, Logo.ORDER_PROCEDURE];\n};\n\nLogo['text_print'] = function(block) {\n  // Print statement.\n  const msg = Logo.valueToCode(block, 'TEXT', Logo.ORDER_NONE) || '\"';\n  return 'pr ' + msg + '\\n';\n};\n\nLogo['text_prompt_ext'] = function(block) {\n  let msg;\n// Prompt function.\n  if (block.getField('TEXT')) {\n    // Internal message.\n    msg = Logo.quote_(block.getFieldValue('TEXT'));\n  } else {\n    // External message.\n    msg = Logo.valueToCode(block, 'TEXT', Logo.ORDER_NONE) || '\\'\\'';\n  }\n  const code = 'readword ' + msg + ' ' + msg;\n  return [code, Logo.ORDER_NONE];\n};\n\nLogo['text_prompt'] = Logo['text_prompt_ext'];\n\n// Logo['text_reverse'] = function(block) {\n// var text = Logo.valueToCode(block, 'TEXT',\n// Logo.ORDER_MEMBER) || '\\'\\'';\n// var code = text + '.split(\\'\\').reverse().join(\\'\\')';\n// return [code, Logo.ORDER_MEMBER];\n// };\n","/**\n * @fileoverview Generating Logo for variable blocks.\n * @author Vilim Lendvaj\n */\n'use strict';\n\ngoog.module('Blockly.Logo.variables');\n\nconst {logoGenerator: Logo} = goog.require('Blockly.Logo');\n\n\nLogo['variables_get'] = function(block) {\n  // Variable getter.\n  var code = ':' + Logo.variableDB_.getName(block.getFieldValue('VAR'),\n      Blockly.VARIABLE_CATEGORY_NAME);\n  return [code, Logo.ORDER_ATOMIC];\n};\n\nLogo['variables_set'] = function(block) {\n  // Variable setter.\n  var argument0 = Logo.valueToCode(block, 'VALUE',\n      Logo.ORDER_ATOMIC) || '0'; //TODO add proper order\n  var varName = Logo.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.VARIABLE_CATEGORY_NAME);\n  return 'make ' + Logo.quote_(varName) + ' ' + argument0 + '\\n';\n};\n","/**\n * @fileoverview Generating Logo for dynamic variable blocks.\n * @author Vilim Lendvaj\n */\n'use strict';\n\ngoog.module('Blockly.Logo.variablesDynamic');\n\nconst {logoGenerator: Logo} = goog.require('Blockly.Logo');\ngoog.require('Blockly.Logo.variables');\n\n\n// Logo is dynamically typed.\nLogo['variables_get_dynamic'] = Logo['variables_get'];\nLogo['variables_set_dynamic'] = Logo['variables_set'];\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Complete helper functions for generating Lua for\n *     blocks.  This is the entrypoint for lua_compressed.js.\n * @suppress {extraRequire}\n */\n'use strict';\n\ngoog.module('Blockly.Logo.all');\n\nconst moduleExports = goog.require('Blockly.Logo');\ngoog.require('Blockly.Logo.colour');\ngoog.require('Blockly.Logo.lists');\ngoog.require('Blockly.Logo.logic');\ngoog.require('Blockly.Logo.logo');\ngoog.require('Blockly.Logo.loops');\ngoog.require('Blockly.Logo.math');\ngoog.require('Blockly.Logo.procedures');\ngoog.require('Blockly.Logo.texts');\ngoog.require('Blockly.Logo.variables');\ngoog.require('Blockly.Logo.variablesDynamic');\n\nexports = moduleExports;\n"]}